 


// Copyright 2015 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Build date: 11/17/2015 13:52:58
//     C# generater version: 1.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Google.Apis.Analytics.v3;
using Google.Apis.Analytics.v3.Data;

namespace DAIMTO.Analytics.v3.Sample
{
    class ManagementWebpropertiesSample
    {
			 /// <summary>
		/// Gets a web property to which the user has access.
		/// Documentation: https://developers.google.com/analytics//v3/webproperties/get
		/// </summary>
		/// <param name="service">Valid authentcated AnalyticsService</param>
		/// <param name="accountId">Account ID to retrieve the web property for.</param>
       /// <param name="webPropertyId">ID to retrieve the web property for.</param>
        /// <returns></returns>
		 public static Webproperty get(AnalyticsService service, string accountId, string webPropertyId)
		 {
		  try
            {
                var request = service.Management.Webproperties.Get(accountId, webPropertyId);
		  return  request.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Request Failed " + ex.Message);
                throw ex;
            }
		 
		 
		 }
		 
		
		 /// <summary>
		/// Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
		/// Documentation: https://developers.google.com/analytics//v3/webproperties/insert
		/// </summary>
		/// <param name="service">Valid authentcated AnalyticsService</param>
		/// <param name="body">Valid Webproperty Body</param>
       /// <param name="accountId">Account ID to create the web property for.</param>
        /// <returns></returns>
		 public static Webproperty insert(AnalyticsService service, Webproperty body, string accountId)
		 {
		  try
            {
                var request = service.Management.Webproperties.Insert(body, accountId);
		  return  request.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Request Failed " + ex.Message);
                throw ex;
            }
		 
		 
		 }
		 
		
		 /// <summary>
		/// Lists web properties to which the user has access.
		/// Documentation: https://developers.google.com/analytics//v3/webproperties/list
		/// </summary>
		/// <param name="service">Valid authentcated AnalyticsService</param>
		/// <param name="accountId">Account ID to retrieve web properties for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.</param>
        /// <returns></returns>
		 public static Webproperties list(AnalyticsService service, string accountId)
		 {
		  try
            {
                var request = service.Management.Webproperties.List(accountId);
		  return  request.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Request Failed " + ex.Message);
                throw ex;
            }
		 
		 
		 }
		 
		
		 /// <summary>
		/// Updates an existing web property. This method supports patch semantics.
		/// Documentation: https://developers.google.com/analytics//v3/webproperties/patch
		/// </summary>
		/// <param name="service">Valid authentcated AnalyticsService</param>
		/// <param name="body">Valid Webproperty Body</param>
       /// <param name="accountId">Account ID to which the web property belongs</param>
       /// <param name="webPropertyId">Web property ID</param>
        /// <returns></returns>
		 public static Webproperty patch(AnalyticsService service, Webproperty body, string accountId, string webPropertyId)
		 {
		  try
            {
                var request = service.Management.Webproperties.Patch(body, accountId, webPropertyId);
		  return  request.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Request Failed " + ex.Message);
                throw ex;
            }
		 
		 
		 }
		 
		
		 /// <summary>
		/// Updates an existing web property.
		/// Documentation: https://developers.google.com/analytics//v3/webproperties/update
		/// </summary>
		/// <param name="service">Valid authentcated AnalyticsService</param>
		/// <param name="body">Valid Webproperty Body</param>
       /// <param name="accountId">Account ID to which the web property belongs</param>
       /// <param name="webPropertyId">Web property ID</param>
        /// <returns></returns>
		 public static Webproperty update(AnalyticsService service, Webproperty body, string accountId, string webPropertyId)
		 {
		  try
            {
                var request = service.Management.Webproperties.Update(body, accountId, webPropertyId);
		  return  request.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Request Failed " + ex.Message);
                throw ex;
            }
		 
		 
		 }
		 
		
    }


}

